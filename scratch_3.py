# -*- coding: utf-8 -*-
"""Copy of Final_Test_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BNLM-t6tuQNt3KWtYcZa3sxPtQoUBdtt
"""
"""
from google.colab import drive
drive.mount('/content/drive')
"""

import os
import numpy as np
import tensorflow as tf
from tensorflow import keras

from keras import optimizers
from keras import models
from keras import layers
from keras import regularizers
from keras import backend as K

from keras.models import Model, Sequential
from keras.layers import Layer, Dense, Dropout, Input, Activation, TimeDistributed, Reshape, \
                                    LSTM, Bidirectional, Conv1D, Conv2D, MaxPooling2D, Flatten, BatchNormalization, \
                                    GlobalAveragePooling2D, Convolution1D
from keras.callbacks import History
from keras.utils import plot_model
from skimage.transform import resize

import cv2
import matplotlib.pyplot as plt
import pickle
from sklearn.metrics import confusion_matrix, accuracy_score
from sklearn.metrics import RocCurveDisplay, roc_curve
import time
import math
import random

from sklearn.model_selection import StratifiedKFold, KFold
from sklearn.model_selection import train_test_split
from sklearn.metrics import ConfusionMatrixDisplay, confusion_matrix
from keras.utils import plot_model

import cv2
import os

def load_images_from_folder(folder):
    images = []
    for filename in os.listdir(folder):
        img = cv2.imread(os.path.join(folder,filename))
        #print(img)
        if img is not None:
            images.append(img)
    return images

# Commented out IPython magic to ensure Python compatibility.
#from google.colab import drive
#drive.mount('/content/gdrive')
 #%cd /content/gdrive/My Drive/Test_Data/

base_dir1 = 'C:/Users/ASUS/Desktop/7th/Test_Data/PLV/test1'
Images_data1=load_images_from_folder(base_dir1)

X_test_PLV  = Images_data1

#print(np.shape(X_test_PLV ))

base_dir2 = 'C:/Users/ASUS/Desktop/7th/Test_Data/Scal/test1'
Images_data2=load_images_from_folder(base_dir2)
X_test_Scal  = Images_data2

#print(np.shape(X_test_Scal ))

base_dir3 = 'C:/Users/ASUS/Desktop/7th/Test_Data/PAC/test1'
Images_data3=load_images_from_folder(base_dir3)
X_test_PAC  = Images_data3

#print(np.shape(X_test_PAC ))

#!ls

## Fold1

filename11 = "Measures_Voting2_PLV_fold1_model.keras"
loaded_model11 = pickle.load(open(filename11, 'rb'))
import joblib
#loaded_model1 = joblib.load('Measures_PLV_fold1_model.sav')
#loaded_model11 = models.load_model('C:/Users/ASUS/PycharmProjects/pythonProject1/Measures_PLV_fold1_model.sav')
result_PLV_fold1 = loaded_model11.predict(np.array(X_test_PLV)).flatten().tolist()

filename12 = 'Measures_Scal_fold1_model.sav'
loaded_model12 = pickle.load(open(filename12, 'rb'))
result_Scal_fold1 = loaded_model12.predict(np.array(X_test_Scal)).flatten().tolist()

filename13 = 'Measures_PAC_fold1_model.sav'
loaded_model13 = pickle.load(open(filename13, 'rb'))
result_PAC_fold1 = loaded_model13.predict(np.array(X_test_PAC)).flatten().tolist()

Group1 = (result_PLV_fold1, result_Scal_fold1, result_PAC_fold1)#predict_RQA,
Group2 = np.array(Group1)
Group3  = np.transpose(Group2)

filename14 = 'Final_fold1_model.sav'
loaded_model14 = pickle.load(open(filename14, 'rb'))
Vot_Out1 = loaded_model14.predict(Group3).flatten().tolist()
Vot_Out2=np.array(Vot_Out1)
#r1 = Vot_Out2.reshape(32,9)
Vot_Out_fold1=(Vot_Out2>0.5).astype(int)
#print(Vot_Out2)
#print(Vot_Out_fold1)

## Fold2

filename21 = 'Measures_PLV_fold2_model.sav'
loaded_model21 = pickle.load(open(filename21, 'rb'))
result_PLV_fold2 = loaded_model21.predict(np.array(X_test_PLV)).flatten().tolist()

filename22 = 'Measures_Scal_fold2_model.sav'
loaded_model22 = pickle.load(open(filename22, 'rb'))
result_Scal_fold2 = loaded_model22.predict(np.array(X_test_Scal)).flatten().tolist()

filename23 = 'Measures_PAC_fold2_model.sav'
loaded_model23 = pickle.load(open(filename23, 'rb'))
result_PAC_fold2 = loaded_model23.predict(np.array(X_test_PAC)).flatten().tolist()

Group1 = (result_PLV_fold2, result_Scal_fold2, result_PAC_fold2)#predict_RQA,
Group2 = np.array(Group1)
Group3  = np.transpose(Group2)

filename24 = 'Final_fold2_model.sav'
loaded_model24 = pickle.load(open(filename24, 'rb'))
Vot_Out1 = loaded_model24.predict(Group3).flatten().tolist()
Vot_Out2=np.array(Vot_Out1)
#r1 = Vot_Out2.reshape(32,9)
Vot_Out_fold2=(Vot_Out2>0.5).astype(int)
#print(Vot_Out2)
#print(Vot_Out_fold2)

## Fold3

filename31 = 'Measures_PLV_fold3_model.sav'
loaded_model31 = pickle.load(open(filename31, 'rb'))
result_PLV_fold3 = loaded_model31.predict(np.array(X_test_PLV)).flatten().tolist()

filename32 = 'Measures_Scal_fold3_model.sav'
loaded_model32 = pickle.load(open(filename32, 'rb'))
result_Scal_fold3 = loaded_model32.predict(np.array(X_test_Scal)).flatten().tolist()

filename33 = 'Measures_PAC_fold3_model.sav'
loaded_model33 = pickle.load(open(filename33, 'rb'))
result_PAC_fold3 = loaded_model33.predict(np.array(X_test_PAC)).flatten().tolist()

Group1 = (result_PLV_fold3, result_Scal_fold3, result_PAC_fold3)#predict_RQA,
Group2 = np.array(Group1)
Group3  = np.transpose(Group2)

filename34 = 'Final_fold3_model.sav'
loaded_model34 = pickle.load(open(filename34, 'rb'))
Vot_Out1 = loaded_model34.predict(Group3).flatten().tolist()
Vot_Out2=np.array(Vot_Out1)
#r1 = Vot_Out2.reshape(32,9)
Vot_Out_fold3=(Vot_Out2>0.5).astype(int)
#print(Vot_Out2)
#print(Vot_Out_fold3)

## Fold4

filename41 = 'Measures_PLV_fold4_model.sav'
loaded_model41 = pickle.load(open(filename41, 'rb'))
result_PLV_fold4 = loaded_model41.predict(np.array(X_test_PLV)).flatten().tolist()

filename42 = 'Measures_Scal_fold4_model.sav'
loaded_model42 = pickle.load(open(filename42, 'rb'))
result_Scal_fold4 = loaded_model42.predict(np.array(X_test_Scal)).flatten().tolist()

filename43 = 'Measures_PAC_fold4_model.sav'
loaded_model43 = pickle.load(open(filename43, 'rb'))
result_PAC_fold4 = loaded_model43.predict(np.array(X_test_PAC)).flatten().tolist()

Group1 = (result_PLV_fold4, result_Scal_fold4, result_PAC_fold4)#predict_RQA,
Group2 = np.array(Group1)
Group3  = np.transpose(Group2)

filename44 = 'Final_fold4_model.sav'
loaded_model44 = pickle.load(open(filename44, 'rb'))
Vot_Out1 = loaded_model44.predict(Group3).flatten().tolist()
Vot_Out2=np.array(Vot_Out1)
#r1 = Vot_Out2.reshape(32,9)
Vot_Out_fold4=(Vot_Out2>0.5).astype(int)
#print(Vot_Out2)
#print(Vot_Out_fold4)

## Fold5

filename51 = 'Measures_PLV_fold5_model.sav'
loaded_model51 = pickle.load(open(filename51, 'rb'))
result_PLV_fold5 = loaded_model51.predict(np.array(X_test_PLV)).flatten().tolist()

filename52 = 'Measures_Scal_fold5_model.sav'
loaded_model52 = pickle.load(open(filename52, 'rb'))
result_Scal_fold5 = loaded_model52.predict(np.array(X_test_Scal)).flatten().tolist()

filename53 = 'Measures_PAC_fold5_model.sav'
loaded_model53 = pickle.load(open(filename53, 'rb'))
result_PAC_fold5 = loaded_model53.predict(np.array(X_test_PAC)).flatten().tolist()

Group1 = (result_PLV_fold5, result_Scal_fold5, result_PAC_fold5)#predict_RQA,
Group2 = np.array(Group1)
Group3  = np.transpose(Group2)

filename54 = 'Final_fold5_model.sav'
loaded_model54 = pickle.load(open(filename54, 'rb'))
Vot_Out1 = loaded_model54.predict(Group3).flatten().tolist()
Vot_Out2=np.array(Vot_Out1)
#r1 = Vot_Out2.reshape(32,9)
Vot_Out_fold5=(Vot_Out2>0.5).astype(int)
#print(Vot_Out2)
#print(Vot_Out_fold5)

import pandas as pd
from scipy import stats

Final_Result1 = (Vot_Out_fold1, Vot_Out_fold2, Vot_Out_fold3, Vot_Out_fold4, Vot_Out_fold5)#predict_RQA,
Final_Result2 = np.array(Final_Result1)
Final_Result3=pd.DataFrame(np.transpose(Final_Result2))
Final_Result4=Final_Result3.mode(axis=1)[0]
Final_Result5=stats.mode(Final_Result4)

print(Final_Result4)
print(Final_Result5)
#1 : OCD
#2 : Norm
